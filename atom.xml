<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蘑菇屋</title>
  
  <subtitle>一个蘑菇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaomogu.me/"/>
  <updated>2018-03-19T14:29:45.096Z</updated>
  <id>http://xiaomogu.me/</id>
  
  <author>
    <name>树荫小蘑菇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis 初始化过程</title>
    <link href="http://xiaomogu.me/2018/03/19/Mybatis%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <id>http://xiaomogu.me/2018/03/19/Mybatis 初始化过程/</id>
    <published>2018-03-19T06:27:59.401Z</published>
    <updated>2018-03-19T14:29:45.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-初始化过程"><a href="#Mybatis-初始化过程" class="headerlink" title="Mybatis 初始化过程"></a>Mybatis 初始化过程</h1><blockquote><p> Mybatis的初始化就是将Mybatis的配置信息加载到<code>Configuration</code>这个类中，以便后面的使用。</p></blockquote><p>Mybatis的初始化流程，下面是一段Mybatis从加载配置到执行SQL语句的完整过程的代码(该代码来自Mybatis的测试类)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://orw70g1os.bkt.clouddn.com/1521025129.png" alt="Mybatis测试代码1" title="">                </div>                <div class="image-caption">Mybatis测试代码1</div>            </figure><p>下面我们来一步一步的分析</p><ol><li><p>读取配置文件</p><p>我们可以看到首先使用的是<code>Resources</code>这个类读取的配置文件，以流的形式读取到程序中，返回一个<code>Reader</code>。</p></li><li><p>加载配置文件</p><p>这一步将上面读取的<code>reader</code>作为参数传递给<code>SqlSessionFactoryBuilder</code>用于构建<code>SqlSessionFactory</code>。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://orw70g1os.bkt.clouddn.com/1521026253.png" alt="SqlSessionFactoryBuilder" title="">                </div>                <div class="image-caption">SqlSessionFactoryBuilder</div>            </figure>该类提供了许多重载的方法供我们选择。</p><p><img src="http://orw70g1os.bkt.clouddn.com/1521026596.png" alt=""></p><p>此类的核心就是将我们传入的<code>Reader</code>或者<code>InputStream</code>通过<code>XMLConfigBuilder</code>类的<code>parse</code>方法，构造成<code>Configuration</code>，然后通过第91行的build方法，构造一个<code>SqlSessionFactory</code>并返回。</p></li><li><p>配置文件解析过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line"><span class="keyword">return</span> build(parser.parse());</span><br></pre></td></tr></table></figure><p>配置文件解析的入口就是在这里。根据读取配置文件时传入的<code>Reader</code>或者<code>InputStream</code>分别调用<code>XMLConfigBuilder</code>不同的构造器，实例化出<code>XMLConfigBuilder</code>,然后调用<code>XMLConfigBuilder</code>类中的<code>parse()</code>方法,构造出我们需要的<code>Configuration</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XMLConfigBuilder</span><span class="params">(InputStream inputStream, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="keyword">new</span> XPathParser(inputStream, <span class="keyword">true</span>, props, <span class="keyword">new</span> XMLMapperEntityResolver()), environment, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是构建<code>XMLConfigBuilder</code>的具体方法。这个地方的构造过程如下</p><ul><li><p>先实例化<code>XMLMapperEntityResolver</code>,然后将其作为实例化<code>XPathParser</code>的参数之一，最后实例化<code>XMLConfigBuilder</code></p></li><li><p>实例化<code>XMLMapperEntityResolver</code>的过程很简单，调用的是其无参构造函数，<code>XMLMapperEntityResolver</code>里面包含了一些Mybatis的DTD。该类对外暴露了一个<code>public InputSource resolveEntity(String publicId, String systemId)</code>的方法，用于寻找根据<code>publicId</code>和<code>systemId</code>,寻找对应的DTD文件。</p></li><li><p>实例化<code>XPathParser</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XPathParser</span><span class="params">(InputStream inputStream, <span class="keyword">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> </span>&#123;</span><br><span class="line">  commonConstructor(validation, variables, entityResolver);</span><br><span class="line">  <span class="keyword">this</span>.document = createDocument(<span class="keyword">new</span> InputSource(inputStream));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>inputStream</code>就是我们传入的配置文件的流的信息，entityResolver是我们刚刚实例化的<code>XMLMapperEntityResolver</code>。首先调用了<code>commonConstructor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commonConstructor</span><span class="params">(<span class="keyword">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.validation = validation;</span><br><span class="line">  <span class="keyword">this</span>.entityResolver = entityResolver;</span><br><span class="line">  <span class="keyword">this</span>.variables = variables;</span><br><span class="line">   <span class="comment">// 实例化一个XPath工厂，用于生产XPath</span></span><br><span class="line">  XPathFactory factory = XPathFactory.newInstance();</span><br><span class="line">  <span class="keyword">this</span>.xpath = factory.newXPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完<code>commonConstructor</code>之后就是创建<code>Document</code>了,这一块没啥重点，解析XML成Document对象而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Document <span class="title">createDocument</span><span class="params">(InputSource inputSource)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// important: this must only be called AFTER common constructor</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个用于创建DocumentBuilder的工厂，并给工厂设置一些参数</span></span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    factory.setValidating(validation);</span><br><span class="line"></span><br><span class="line">    factory.setNamespaceAware(<span class="keyword">false</span>);</span><br><span class="line">    factory.setIgnoringComments(<span class="keyword">true</span>);</span><br><span class="line">    factory.setIgnoringElementContentWhitespace(<span class="keyword">false</span>);</span><br><span class="line">    factory.setCoalescing(<span class="keyword">false</span>);</span><br><span class="line">    factory.setExpandEntityReferences(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过工厂创建一个用于创建Document的builder</span></span><br><span class="line">    DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">    <span class="comment">// 设置一些参数</span></span><br><span class="line">    builder.setEntityResolver(entityResolver);</span><br><span class="line">    builder.setErrorHandler(<span class="keyword">new</span> ErrorHandler() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 解析输入的流创建Document</span></span><br><span class="line">    <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error creating document instance.  Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>都创建完了，我们再回到真正执行<code>XMLConfigBuilder</code>创建的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">XMLConfigBuilder</span><span class="params">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 通过父类调用Configuration的无参构造方法</span></span><br><span class="line">  <span class="keyword">super</span>(<span class="keyword">new</span> Configuration());</span><br><span class="line">  ErrorContext.instance().resource(<span class="string">"SQL Mapper Configuration"</span>);</span><br><span class="line">  <span class="keyword">this</span>.configuration.setVariables(props);</span><br><span class="line">  <span class="comment">// 确保只执行一次，调用parse()方法时，会将其设置为true</span></span><br><span class="line">  <span class="keyword">this</span>.parsed = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.environment = environment;</span><br><span class="line">  <span class="comment">// 这个是重点，后面会用到</span></span><br><span class="line">  <span class="keyword">this</span>.parser = parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>new Configuration()</code>具体干了啥，我们可以看一下源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Configuration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"JDBC"</span>, JdbcTransactionFactory.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"MANAGED"</span>, ManagedTransactionFactory.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"JNDI"</span>, JndiDataSourceFactory.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"POOLED"</span>, PooledDataSourceFactory.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"UNPOOLED"</span>, UnpooledDataSourceFactory.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"PERPETUAL"</span>, PerpetualCache.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"FIFO"</span>, FifoCache.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"LRU"</span>, LruCache.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"SOFT"</span>, SoftCache.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"WEAK"</span>, WeakCache.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"DB_VENDOR"</span>, VendorDatabaseIdProvider.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"XML"</span>, XMLLanguageDriver.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"RAW"</span>, RawLanguageDriver.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"SLF4J"</span>, Slf4jImpl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"COMMONS_LOGGING"</span>, JakartaCommonsLoggingImpl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"LOG4J"</span>, Log4jImpl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"LOG4J2"</span>, Log4j2Impl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"JDK_LOGGING"</span>, Jdk14LoggingImpl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"STDOUT_LOGGING"</span>, StdOutImpl.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"NO_LOGGING"</span>, NoLoggingImpl.class);</span><br><span class="line"></span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"CGLIB"</span>, CglibProxyFactory.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"JAVASSIST"</span>, JavassistProxyFactory.class);</span><br><span class="line"></span><br><span class="line">  languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);</span><br><span class="line">  languageRegistry.register(RawLanguageDriver.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这个无参的构造方法主要是注册了一系列的别名，这个我们另行分析，我们先往下看。</p></li><li><p><code>XMLConfigBuilder</code>实例化完成以后就是调用其parse()方法完成一系列配置文件的解析，和对Configuration的装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Configuration <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 保证只被解析一次。</span></span><br><span class="line">  <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Each XMLConfigBuilder can only be used once."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  parsed = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// 解析根节点(至于这个evalNode是如何执行的，可以参照XPath解析xml相关的文章)</span></span><br><span class="line">  XNode xNode = parser.evalNode(<span class="string">"/configuration"</span>);</span><br><span class="line">  <span class="comment">// 解析根节点下面的子节点</span></span><br><span class="line">  parseConfiguration(xNode);</span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConfiguration</span><span class="params">(XNode root)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">//issue #117 read properties first</span></span><br><span class="line">     propertiesElement(root.evalNode(<span class="string">"properties"</span>));</span><br><span class="line">     Properties settings = settingsAsProperties(root.evalNode(<span class="string">"settings"</span>));</span><br><span class="line">     loadCustomVfs(settings);</span><br><span class="line">     typeAliasesElement(root.evalNode(<span class="string">"typeAliases"</span>));</span><br><span class="line">     pluginElement(root.evalNode(<span class="string">"plugins"</span>));</span><br><span class="line">     objectFactoryElement(root.evalNode(<span class="string">"objectFactory"</span>));</span><br><span class="line">     objectWrapperFactoryElement(root.evalNode(<span class="string">"objectWrapperFactory"</span>));</span><br><span class="line">     reflectorFactoryElement(root.evalNode(<span class="string">"reflectorFactory"</span>));</span><br><span class="line">     settingsElement(settings);</span><br><span class="line">     <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">     environmentsElement(root.evalNode(<span class="string">"environments"</span>));</span><br><span class="line">     databaseIdProviderElement(root.evalNode(<span class="string">"databaseIdProvider"</span>));</span><br><span class="line">     typeHandlerElement(root.evalNode(<span class="string">"typeHandlers"</span>));</span><br><span class="line">     mapperElement(root.evalNode(<span class="string">"mappers"</span>));</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error parsing SQL Mapper Configuration. Cause: "</span> + e, e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这是解析Configuration下面的11个子节点，并装配到Configuration中，具体解析过程可以点进去详细查看。</p><p>执行完整个parse()的过程，返回<code>Configuration</code>整个初始化流程也就结束了。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis-初始化过程&quot;&gt;&lt;a href=&quot;#Mybatis-初始化过程&quot; class=&quot;headerlink&quot; title=&quot;Mybatis 初始化过程&quot;&gt;&lt;/a&gt;Mybatis 初始化过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Mybatis的初始化就
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://xiaomogu.me/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://xiaomogu.me/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Git基础命令</title>
    <link href="http://xiaomogu.me/2018/03/01/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://xiaomogu.me/2018/03/01/Git基础命令/</id>
    <published>2018-03-01T00:09:58.660Z</published>
    <updated>2018-03-01T08:13:45.442Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>初始化仓库    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>查看仓库日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>查看仓库状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>添加文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure></li><li><p>添加所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -A .</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "&lt;commit message&gt;"</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repository URL&gt;</span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master    // 注释:远程分支为origin，默认的本地分支为master，-u是记住提交参数，下次可以直接使用git push 进行提交</span><br></pre></td></tr></table></figure></li><li><p>拉取远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master     // 注释:同上</span><br></pre></td></tr></table></figure></li><li><p>查看最近一次提交的更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD//注释:HEAD为指针,diff的另一个重要用途是查看已经暂存文件内的更改。记住，staged文件是我们告诉git已准备好提交的文件。</span><br></pre></td></tr></table></figure></li><li><p>取消暂存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;filename&gt;//注释:从暂存区移除指定文件</span><br></pre></td></tr></table></figure></li><li><p>撤销</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;//注释:重新检出某个文件，恢复为最后一次commit的状态</span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;new_branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建并切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new_branch&gt;   //注释:13、14两条命令的合并</span><br></pre></td></tr></table></figure></li><li><p>移除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm '&lt;filename&gt;'//注释：此操作会同时从磁盘，暂存区移除指定文件</span><br></pre></td></tr></table></figure></li><li><p>合并分支到master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>移除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure></li></ol><p>相关链接：</p><p><a href="https://try.github.io/levels/1/challenges/1" target="_blank" rel="noopener">try git</a></p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git 中文版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化仓库    &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
      <category term="Git" scheme="http://xiaomogu.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://xiaomogu.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xiaomogu.me/2018/02/10/hello-world/"/>
    <id>http://xiaomogu.me/2018/02/10/hello-world/</id>
    <published>2018-02-10T15:36:16.000Z</published>
    <updated>2018-02-10T15:59:12.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title-Hello-World-测试3"><a href="#title-Hello-World-测试3" class="headerlink" title="title: Hello World 测试3"></a>title: Hello World 测试3</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;title-Hello-World-测试3&quot;&gt;&lt;a href=&quot;#title-Hello-World-测试3&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World 测试3&quot;&gt;&lt;/a&gt;title: Hello World 测试3
      
    
    </summary>
    
      <category term="初始化" scheme="http://xiaomogu.me/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
    
      <category term="测试2" scheme="http://xiaomogu.me/tags/%E6%B5%8B%E8%AF%952/"/>
    
  </entry>
  
</feed>
