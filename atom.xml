<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蘑菇屋</title>
  
  <subtitle>一个蘑菇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaomogu.me/"/>
  <updated>2019-01-01T10:15:04.147Z</updated>
  <id>https://xiaomogu.me/</id>
  
  <author>
    <name>树荫小蘑菇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给V2ex写了个新样式</title>
    <link href="https://xiaomogu.me/2019/01/01/%E7%BB%99V2ex%E5%86%99%E4%BA%86%E4%B8%AA%E6%96%B0%E6%A0%B7%E5%BC%8F/"/>
    <id>https://xiaomogu.me/2019/01/01/给V2ex写了个新样式/</id>
    <published>2019-01-01T02:12:47.415Z</published>
    <updated>2019-01-01T10:15:04.147Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2019年到了，给V站新写了个样式-Stylus"><a href="#2019年到了，给V站新写了个样式-Stylus" class="headerlink" title="2019年到了，给V站新写了个样式(Stylus)"></a>2019年到了，给V站新写了个样式(Stylus)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">document</span> domain(<span class="string">"v2ex.com"</span>) &#123;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Noto Sans SC Sliced"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, <span class="string">"PingFang SC"</span>, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"Heiti SC"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Top</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0175C2</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* position: fixed;*/</span></span><br><span class="line">    <span class="comment">/* height: 60px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Wrapper</span> &#123;</span><br><span class="line">   <span class="comment">/*  padding-top: 60px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#Top</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,</span><br><span class="line"><span class="selector-id">#Top</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span><br><span class="line"><span class="selector-id">#Top</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">16px</span> <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">40px</span> <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Rightbar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">285px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sep20</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Top</span> &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span> <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#qbar</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#qbar</span> &gt; <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#ffffff75</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Search</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">89px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">document</span> regexp(<span class="string">"(.*?)v2ex.com/t(.*?)"</span>) &#123;</span><br><span class="line"><span class="selector-id">#Rightbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#Main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.xiaomogu.me/1546337254.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.xiaomogu.me/1546336989.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2019年到了，给V站新写了个样式-Stylus&quot;&gt;&lt;a href=&quot;#2019年到了，给V站新写了个样式-Stylus&quot; class=&quot;headerlink&quot; title=&quot;2019年到了，给V站新写了个样式(Stylus)&quot;&gt;&lt;/a&gt;2019年到了，给V站新写
      
    
    </summary>
    
    
      <category term="css" scheme="https://xiaomogu.me/tags/css/"/>
    
      <category term="v2ex" scheme="https://xiaomogu.me/tags/v2ex/"/>
    
  </entry>
  
  <entry>
    <title>外部容器访问Docker内部dubbo服务的解决方案</title>
    <link href="https://xiaomogu.me/2018/04/23/%E5%A4%96%E9%83%A8%E5%AE%B9%E5%99%A8%E8%AE%BF%E9%97%AEDocker%E5%86%85%E9%83%A8dubbo%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://xiaomogu.me/2018/04/23/外部容器访问Docker内部dubbo服务的解决方案/</id>
    <published>2018-04-23T06:31:18.000Z</published>
    <updated>2018-12-26T14:56:57.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外部容器访问Docker内部dubbo服务的解决方案"><a href="#外部容器访问Docker内部dubbo服务的解决方案" class="headerlink" title="外部容器访问Docker内部dubbo服务的解决方案"></a>外部容器访问Docker内部dubbo服务的解决方案</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>服务提供者和消费者混合部署在docker容器中和容器外的场景，容器外的服务无法访问容器内的服务。</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>Dubbo的服务发现机制，是每个服务提供者向Dubbo注册中心注册过，注册中心会将服务提供者的地址提供给同样在注册中心注册的服务调用方，也就是消费者。之后即使Dubbo注册中心挂了也不影响服务的调用。出现这个问题是因为容器内部的服务提供者向注册中心提供的地址是172.xx.xx.xx，也就是Docker内部的IP地址，但是这个IP地址在Docker外部是无法访问的，所以出现了上述的问题。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>网上很多解决方案都有一定的局限性，像是改hostname等，都会给后续的使用带来不可预知的问题，庆幸的是在Dubbo的Issues中发现了类似的问题，<a href="https://github.com/apache/incubator-dubbo/issues/668" target="_blank" rel="noopener">参见这里</a>，Dubbo官方给出了对应的解决方案。具体如下：</p><p>由于我们使用docker-compose进行编排，所以我们要修改的也是对应的docker-compose.yml文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">projectName:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">project:v1.0</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"8422:8080"</span></span><br><span class="line">    <span class="comment"># 前面为注册到注册中心的端口，后面为docker监听的端口</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"28081:28080"</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line">    <span class="comment"># 注册到注册中心的IP，这里我们选择宿主机的IP</span></span><br><span class="line"><span class="attr">    DUBBO_IP_TO_REGISTRY:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span></span><br><span class="line">    <span class="comment"># 注册到注册中心的端口</span></span><br><span class="line"><span class="attr">    DUBBO_PORT_TO_REGISTRY:</span> <span class="number">28081</span></span><br></pre></td></tr></table></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>我们在dubbo-admin控制台中可以看到对应服务的提供者的IP已经是宿主机的IP了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.xiaomogu.me/1524464714.png" alt="docker provider" title="">                </div>                <div class="image-caption">docker provider</div>            </figure><p>这样注册中心提供给服务调用者的IP就会是宿主机的IP，端口是我们注册的宿主机器的端口，当服务调用者进行服务调用的时候，宿主机的端口映射到了对应容器的dubbo监听端口，也就能够实现端口转发，达到正常的调用操作。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://github.com/dubbo/dubbo-docker-sample" target="_blank" rel="noopener">dubbo-docker-sample</a></p><p><a href="http://coderxiao.com/2015/06/10/Dubbo-distributed-service2/" target="_blank" rel="noopener">基于Dubbo的跨主机容器通信遇到的问题</a></p><p><a href="https://github.com/apache/incubator-dubbo/issues/668" target="_blank" rel="noopener">dubbo服务部署在容器中，注册发现的问题 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;外部容器访问Docker内部dubbo服务的解决方案&quot;&gt;&lt;a href=&quot;#外部容器访问Docker内部dubbo服务的解决方案&quot; class=&quot;headerlink&quot; title=&quot;外部容器访问Docker内部dubbo服务的解决方案&quot;&gt;&lt;/a&gt;外部容器访问Do
      
    
    </summary>
    
      <category term="Docker" scheme="https://xiaomogu.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://xiaomogu.me/tags/Docker/"/>
    
      <category term="Dubbo" scheme="https://xiaomogu.me/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码阅读-Iterable与Iterator</title>
    <link href="https://xiaomogu.me/2018/04/22/JDK%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-Iterable%E4%B8%8EIterator/"/>
    <id>https://xiaomogu.me/2018/04/22/JDK源码阅读-Iterable与Iterator/</id>
    <published>2018-04-21T16:18:01.000Z</published>
    <updated>2018-04-21T16:19:56.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK源码阅读-Iterable与Iterator"><a href="#JDK源码阅读-Iterable与Iterator" class="headerlink" title="JDK源码阅读-Iterable与Iterator"></a>JDK源码阅读-Iterable与Iterator</h2><blockquote><p>JDK版本：jdk1.8.0_121,本文中所有代码的编译和运行环境均依赖该版本的jdk和对应版本的jre</p></blockquote><h3 id="1-什么是Iterable"><a href="#1-什么是Iterable" class="headerlink" title="1.什么是Iterable"></a>1.什么是Iterable</h3><h4 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h4><p>Iterable是Java集合中的一个顶级接口，是<em>Collection</em>的父类，用于进行集合中元素的迭代。<em>Iterable</em>的方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面包含三个方法，其中<em>forEach</em>和<em>spliterator</em>这两个Java 1.8新增的<strong>default</strong>方法，关于什么是<strong>default</strong>方法，参考<a href="http://www.importnew.com/7302.html" target="_blank" rel="noopener">这里</a>,(PS:Java为了向下兼容也是煞费苦心啊:dog:)</p><h4 id="1-2-iterator"><a href="#1-2-iterator" class="headerlink" title="1.2 iterator()"></a>1.2 iterator()</h4><p><em>iterator()</em>方法是Java1.5新增的特性，用于生成<em>Iterator</em>迭代器，这里该方法只负责生成<em>Iterator</em>迭代器，并不包含任何迭代器的状态，例如“当前元素”等。</p><p>而<em>Iterator</em>迭代器是作为一个独立的接口存在的。</p><p>该遍历是<strong>顺序遍历</strong></p><h4 id="1-3-forEach"><a href="#1-3-forEach" class="headerlink" title="1.3 forEach()"></a>1.3 forEach()</h4><p>forEach 很熟悉 用来支持lambda表达式的，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(item-&gt;&#123;</span><br><span class="line">    doSomething...;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以看到 在<em>Iterable</em>接口中默认给出的实现是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">    action.accept(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个方法在子类中是可以被覆盖的，很多集合都对该方法进行了重写操作，以适应不同集合的特性。</p><h4 id="1-4-spliterator"><a href="#1-4-spliterator" class="headerlink" title="1.4 spliterator()"></a>1.4 spliterator()</h4><p>该接口是Java为了<strong>并行</strong>遍历数据源中的元素而设计的迭代器</p><p>该方法类似于<em>iterator()</em>这个方法，区别在于<em>iterator()</em>是顺序遍历，而<em>spliterator()</em>是并行遍历，具体可以参考这里<a href="https://segmentfault.com/q/1010000007087438" target="_blank" rel="noopener">Java8里面的java.util.Spliterator接口有什么用？</a></p><hr><h3 id="2-什么是Iterator"><a href="#2-什么是Iterator" class="headerlink" title="2.什么是Iterator"></a>2.什么是Iterator</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p><em>Iterator</em>是<strong>具有迭代状态</strong>的对象，即从该类的方法中我们可以获取当前迭代的元素，下一个元素等操作。它可以把访问逻辑从不同类型的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。<em>Iterator</em>的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-hasNext"><a href="#2-2-hasNext" class="headerlink" title="2.2 hasNext()"></a>2.2 hasNext()</h4><p>接口解释：用于判断迭代器(<em>iteration</em>)中是否还有更多的元素(elements<em>)。如果迭代器中还有更多的元素则返回</em>true。</p><h4 id="2-3-next"><a href="#2-3-next" class="headerlink" title="2.3 next()"></a>2.3 next()</h4><p>接口解释：用于获取迭代器中的下一个元素(<em>next element</em>)，这里如果下一个元素不存在会抛出一个<em>NoSuchElementException</em>的异常，所以这个方法通常结合<em>hasNext()</em>一起使用。</p><h4 id="2-4-remove-star-star"><a href="#2-4-remove-star-star" class="headerlink" title="2.4 remove():star::star:"></a>2.4 remove():star::star:</h4><p>接口解释：用于从集合中移除迭代器返回的最后一个元素。<strong>这个方法只能在<em>next()</em>方法之后进行调用<em>一次</em></strong></p><p>这个方法会抛出两个异常</p><ul><li><em>UnsupportedOperationException:</em>表示当前迭代器不支持移除操作。</li><li><em>IllegalStateException</em>:表示<em>next()</em>方法尚未执行 或 <em>next()</em>方法后已经执行了<em>remove()</em>方法。</li></ul><p>这里有两个例子，如何在集合中移除一个元素的操作。</p><p><strong>错误示范</strong>:x::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(<span class="string">"A"</span>,s))&#123;</span><br><span class="line">        list.remove(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会抛出一个异常<code>java.util.ConcurrentModificationException</code>，表示 方法检测到对象的并发修改，但是这种修改并不被允许。</p><p>产生的原因就是迭代器是依赖于集合而存在，在判断成功后，集合的中移除了该元素，而迭代器却不知道，所以就报错了，这个错叫并发修改异常。</p><p><strong>正确操作✅:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>);</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(<span class="string">"A"</span>, str)) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java8中上面的代码可以用下面两行来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>);</span><br><span class="line">list.removeIf(str -&gt; Objects.equals(<span class="string">"A"</span>, str));</span><br></pre></td></tr></table></figure><p>这两种方式都是可以正确的完成我们所需要的操作的。</p><h4 id="2-5-forEachRemaining"><a href="#2-5-forEachRemaining" class="headerlink" title="2.5 forEachRemaining()"></a>2.5 forEachRemaining()</h4><p>这个方法是1.8新增的方法，对每个剩余的元素执行给定的操作，直到所有元素都执行完成或者抛出异常。</p><p>如果传入的操作(<em>Consumer&lt;? super E&gt; action</em>)为空的话，该方法会抛出一个<em>NullPointerException</em></p><h3 id="3-Iterator的实现"><a href="#3-Iterator的实现" class="headerlink" title="3.Iterator的实现"></a>3.Iterator的实现</h3><p>我们可以看到<em>Iterator</em>提供了最简单的向后遍历的操作接口，如果我们需要执行向前遍历呢？或者执行某些特殊的遍历方式，那么这个时候就要看不同集合对<em>Iterator</em>的实现了，不同集合的对于<em>Iterator</em>的实现基本都是通过内部类来做的实现。</p><h4 id="3-1-ArrayList中Iterator的实现"><a href="#3-1-ArrayList中Iterator的实现" class="headerlink" title="3.1 ArrayList中Iterator的实现"></a>3.1 ArrayList中Iterator的实现</h4><h5 id="3-1-1-Itr"><a href="#3-1-1-Itr" class="headerlink" title="3.1.1 Itr"></a>3.1.1 Itr</h5><p>在<strong>ArrayList</strong>中，<em>iterator()</em>方法被返回了一个<strong>Itr</strong>的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrArrayList.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Itr对象就是对<strong>ArrayList</strong>对<strong>Iterator</strong>的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 被返回的节点的索引</span></span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return、</span></span><br><span class="line">    <span class="comment">// 最后一个被返回的节点的索引</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="comment">// expectedModCount 期望的被修改的次数，</span></span><br><span class="line">    <span class="comment">// modCount 被修改的次数,这个下面会用得到。定义modCount的注释翻译可以参考[这里](https://blog.csdn.net/qq_27093465/article/details/53116250)</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否还有下一个元素,如果当前游标所在位置不等于集合的大小的时候都会返回true.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * next操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 校验是否被非法修改</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="comment">// 当前游标大于等于集合的大小的时候 抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="comment">// 存储ArrayList的数组缓冲区的大小</span></span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="comment">// 如果游标大于等于数组缓冲区的大小则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="comment">// 游标+1</span></span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取对应下表的内容，进行强转， 并将当前访问的节点记录到lastRet中，</span></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// lastRet小于0，即表示没有执行next操作，也就是不存在当前元素。</span></span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">   <span class="comment">// 校验是否被非法修改</span></span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将最后一次访问的节点移除</span></span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            <span class="comment">// 更新 游标，😈我们直接执行list中的remove方法就是因为没有更新游标和expectedModCount，所以无法通过校验。</span></span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            <span class="comment">// 更改最后一次访问的索引为-1，此处因为最后一次访问的元素已经不存在了，所以更新为-1，同时也可以避免再次调用remove方法。</span></span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 更新修改次数</span></span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="comment">// 捕获remove过程中出现的数组下标越界异常，更改为非法修改异常。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// final 防止这个方法被非法修改</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 校验修改次数和期望的修改次数是否相同，remove是一个典型的例子。Itr中的remove方法更新了expectedModCount，而list中remove方法并没有，所以我们可以使用Iterator进行遍历删除。</span></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-1-ListItr"><a href="#3-1-1-ListItr" class="headerlink" title="3.1.1 ListItr"></a>3.1.1 ListItr</h5><p>在ArrayList中，还有一个<em>listIterator()</em>方法被返回了一个<strong>ListIterator</strong>的对象。那么这个对象是干啥的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从指定位置开始返回一个迭代器，如果位置超过了List的大小，则抛出IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个从0开始的迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法在<strong>Itr</strong>基础上提供了一些List集合特有的遍历方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承了Itr，实现了ListIterator接口，ListIterator接口中定义了List集合一些特有的遍历方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法，可以指定迭代器的起始位置，即cursor的位置</span></span><br><span class="line">    ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        cursor = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否有前一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断游标是否是在最前面</span></span><br><span class="line">        <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后一个元素的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前一个元素的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 校验是否被非法修改(Itr中的方法)</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="comment">// 确定前一个元素的位置</span></span><br><span class="line">        <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 前一个元素如果小于0则表示当前是起始节点，上一个节点不存在。</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">      <span class="comment">// 剩下的和next()同理</span></span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换当前元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前元素是否存在，同理的类似于remove()</span></span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="comment">// 校验是否被非法修改</span></span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 修改缓冲区数组的值</span></span><br><span class="line">            ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个值(原理同remove())</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-迭代器模式"><a href="#4-迭代器模式" class="headerlink" title="4.迭代器模式"></a>4.迭代器模式</h3><p><strong>实现了Iterable接口的类是可迭代的；实现了Iterator接口的类是一个迭代器。</strong></p><p>这里算是一个<strong>迭代器模式</strong>，即提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。</p><h4 id="4-1-类图"><a href="#4-1-类图" class="headerlink" title="4.1 类图"></a>4.1 类图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://orw70g1os.bkt.clouddn.com/1524325872.png" alt="迭代器类图" title="">                </div>                <div class="image-caption">迭代器类图</div>            </figure><h4 id="4-2-迭代器模式的结构"><a href="#4-2-迭代器模式的结构" class="headerlink" title="4.2 迭代器模式的结构"></a>4.2 迭代器模式的结构</h4><ul><li><p>抽象容器(Aggregate):通常是一个接口，提供iterator()方法，比如说Java中的Iterator接口，Collection接口，Set接口等。</p></li><li><p>具体容器(ConcreteAggregate):抽象容器的具体实现类，比如说<strong>ArrayList</strong>，<strong>LinkList</strong>，<strong>HashSet</strong>等。</p></li><li><p>抽象迭代器(Iterator):定义遍历元素所需要的方法，比如说：<em>next()</em>，<em>hasNext()</em>，<em>remove()</em>等方法。</p></li><li><p>迭代器实现(ConcreteIterator):实现迭代器接口中定义的方法，完成集合的迭代。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JDK源码阅读-Iterable与Iterator&quot;&gt;&lt;a href=&quot;#JDK源码阅读-Iterable与Iterator&quot; class=&quot;headerlink&quot; title=&quot;JDK源码阅读-Iterable与Iterator&quot;&gt;&lt;/a&gt;JDK源码阅读-Ite
      
    
    </summary>
    
      <category term="Java基础" scheme="https://xiaomogu.me/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JDK源码" scheme="https://xiaomogu.me/tags/JDK%E6%BA%90%E7%A0%81/"/>
    
      <category term="Java基础" scheme="https://xiaomogu.me/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="https://xiaomogu.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile中`ADD`和`COPY`的区别</title>
    <link href="https://xiaomogu.me/2018/04/10/Dockerfile%E4%B8%AD%60ADD%60%E5%92%8C%60COPY%60%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xiaomogu.me/2018/04/10/Dockerfile中`ADD`和`COPY`的区别/</id>
    <published>2018-04-10T09:34:54.000Z</published>
    <updated>2018-04-10T09:35:34.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile中ADD和COPY的区别"><a href="#Dockerfile中ADD和COPY的区别" class="headerlink" title="Dockerfile中ADD和COPY的区别"></a>Dockerfile中<code>ADD</code>和<code>COPY</code>的区别</h1><blockquote><p>本文来自<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a></p></blockquote><p>建议编写Dockerfile前先熟读上文</p><p>Dockerfile 中提供了两种复制文件的方式：<code>ADD</code>和<code>COPY</code>，这两种方式有什么区别呢？这两者分别在什么时候使用呢?</p><p><code>ADD</code>和<code>COPY</code>功能相似，<code>COPY</code>是首选。因为它比<code>ADD</code>更加透明.<code>COPY</code>仅支持基础的本地文件拷贝到容器中，<code>ADD</code>有些特性(本地tar包解压和远程URL支持) ，这些特性并不是很明显。<code>ADD</code>最好的应用是本地tar包自动解压到镜像中，如<code>ADD rootfs.tar.xz /</code>。</p><p>如果我们在<code>Dockerfile</code>中有多个步骤使用不同文件，逐个<code>COPY</code>这些文件，而不是拷贝所有文件。这样确保每步骤的缓存会还重新更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY requirements.txt /tmp/</span><br><span class="line">RUN pip install --requirement /tmp/requirements.txt</span><br><span class="line">COPY . /tmp/</span><br></pre></td></tr></table></figure><p>出于镜像大小考虑，强烈不建议使用<code>ADD</code>获取远程URL地址的包，我们应该使用curl或者wget替代。这样我们可以在解压后删除不用的文件，而不必添加到镜像的另一层。我们避免使用如下形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ADD http://example.com/big.tar.xz /usr/src/things/</span><br><span class="line">RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span><br><span class="line">RUN make -C /usr/src/things all</span><br></pre></td></tr></table></figure><p>应该替换成如下形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUN mkdir -p /usr/src/things \</span><br><span class="line">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span><br><span class="line">    | tar -xJC /usr/src/things \</span><br><span class="line">    &amp;&amp; make -C /usr/src/things all</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dockerfile中ADD和COPY的区别&quot;&gt;&lt;a href=&quot;#Dockerfile中ADD和COPY的区别&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile中ADD和COPY的区别&quot;&gt;&lt;/a&gt;Dockerfile中&lt;code&gt;ADD
      
    
    </summary>
    
      <category term="Docker" scheme="https://xiaomogu.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://xiaomogu.me/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="https://xiaomogu.me/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 导入证书到JAVA的秘钥库中</title>
    <link href="https://xiaomogu.me/2018/04/10/Dockerfile%20%E5%AF%BC%E5%85%A5%E8%AF%81%E4%B9%A6%E5%88%B0JAVA%E7%9A%84%E7%A7%98%E9%92%A5%E5%BA%93%E4%B8%AD/"/>
    <id>https://xiaomogu.me/2018/04/10/Dockerfile 导入证书到JAVA的秘钥库中/</id>
    <published>2018-04-10T01:07:41.652Z</published>
    <updated>2018-04-10T09:09:33.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile-导入证书到JAVA的秘钥库中"><a href="#Dockerfile-导入证书到JAVA的秘钥库中" class="headerlink" title="Dockerfile 导入证书到JAVA的秘钥库中"></a>Dockerfile 导入证书到JAVA的秘钥库中</h1><p>目的:将已有的CA证书导入到通过Dockerfile导入到JAVA的秘钥库中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> custom/oraclejdk:<span class="number">8</span>-jre8</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span> ./tomcat.cer /tomcat.cer</span><br><span class="line"></span><br><span class="line">RUN $JAVA_HOME/bin/keytool -storepasswd -new mysecretpassword -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit  &amp;&amp; \</span><br><span class="line">echo 'yes' | $JAVA_HOME/bin/keytool -import -alias passport.sso.com -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -file /tomcat.cer -trustcacerts  -storepass mysecretpassword</span><br><span class="line">COPY ./uums.jar /home/uums.jar</span><br><span class="line">CMD ["java","-Dspring.profiles.active=test","-jar","/home/uums.jar"]</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>JAVA_HOME/bin/keytool -storepasswd -new mysecretpassword -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit</span><br></pre></td></tr></table></figure><p>上面这句话的目的是将<code>changeit</code>这个密码存储到秘钥库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'yes' | $JAVA_HOME/bin/keytool -import -alias passport.sso.com -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -file /tomcat.cer -trustcacerts  -storepass mysecretpassword</span><br></pre></td></tr></table></figure><p>此处是导入证书，<code>-storepass mysecretpassword</code>,这句话是指定我们上一步存储的密码名称。这一行如果单独执行的话是需要输入<code>yes</code>来信任该证书的，我们可以通过<code>echo &#39;yes&#39;</code>这种写法来实现<code>yes</code>的自动输入。</p><p>参考：</p><p><a href="https://rootsquash.com/2016/05/02/inserting-certificates-into-java-keystore-via-dockerfile/" target="_blank" rel="noopener">Inserting certificates into Java keystore via Dockerfile</a></p><p><a href="https://blog.csdn.net/tony1130/article/details/5134318" target="_blank" rel="noopener">java中Keytool的使用总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dockerfile-导入证书到JAVA的秘钥库中&quot;&gt;&lt;a href=&quot;#Dockerfile-导入证书到JAVA的秘钥库中&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 导入证书到JAVA的秘钥库中&quot;&gt;&lt;/a&gt;Dockerfile 
      
    
    </summary>
    
      <category term="Docker" scheme="https://xiaomogu.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://xiaomogu.me/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="https://xiaomogu.me/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 初始化过程</title>
    <link href="https://xiaomogu.me/2018/03/19/Mybatis%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <id>https://xiaomogu.me/2018/03/19/Mybatis 初始化过程/</id>
    <published>2018-03-19T06:27:59.401Z</published>
    <updated>2018-12-26T14:58:14.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-初始化过程"><a href="#Mybatis-初始化过程" class="headerlink" title="Mybatis 初始化过程"></a>Mybatis 初始化过程</h1><blockquote><p> Mybatis的初始化就是将Mybatis的配置信息加载到<code>Configuration</code>这个类中，以便后面的使用。</p></blockquote><p>Mybatis的初始化流程，下面是一段Mybatis从加载配置到执行SQL语句的完整过程的代码(该代码来自Mybatis的测试类)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.xiaomogu.me/1521025129.png" alt="Mybatis测试代码1" title="">                </div>                <div class="image-caption">Mybatis测试代码1</div>            </figure><p>下面我们来一步一步的分析</p><ol><li><p>读取配置文件</p><p>我们可以看到首先使用的是<code>Resources</code>这个类读取的配置文件，以流的形式读取到程序中，返回一个<code>Reader</code>。</p></li><li><p>加载配置文件</p><p>这一步将上面读取的<code>reader</code>作为参数传递给<code>SqlSessionFactoryBuilder</code>用于构建<code>SqlSessionFactory</code>。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://orw70g1os.bkt.clouddn.com/1521026253.png" alt="SqlSessionFactoryBuilder" title="">                </div>                <div class="image-caption">SqlSessionFactoryBuilder</div>            </figure>该类提供了许多重载的方法供我们选择。</p><p><img src="http://img.xiaomogu.me/1521026596.png" alt=""></p><p>此类的核心就是将我们传入的<code>Reader</code>或者<code>InputStream</code>通过<code>XMLConfigBuilder</code>类的<code>parse</code>方法，构造成<code>Configuration</code>，然后通过第91行的build方法，构造一个<code>SqlSessionFactory</code>并返回。</p></li><li><p>配置文件解析过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line"><span class="keyword">return</span> build(parser.parse());</span><br></pre></td></tr></table></figure><p>配置文件解析的入口就是在这里。根据读取配置文件时传入的<code>Reader</code>或者<code>InputStream</code>分别调用<code>XMLConfigBuilder</code>不同的构造器，实例化出<code>XMLConfigBuilder</code>,然后调用<code>XMLConfigBuilder</code>类中的<code>parse()</code>方法,构造出我们需要的<code>Configuration</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XMLConfigBuilder</span><span class="params">(InputStream inputStream, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="keyword">new</span> XPathParser(inputStream, <span class="keyword">true</span>, props, <span class="keyword">new</span> XMLMapperEntityResolver()), environment, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是构建<code>XMLConfigBuilder</code>的具体方法。这个地方的构造过程如下</p><ul><li><p>先实例化<code>XMLMapperEntityResolver</code>,然后将其作为实例化<code>XPathParser</code>的参数之一，最后实例化<code>XMLConfigBuilder</code></p></li><li><p>实例化<code>XMLMapperEntityResolver</code>的过程很简单，调用的是其无参构造函数，<code>XMLMapperEntityResolver</code>里面包含了一些Mybatis的DTD。该类对外暴露了一个<code>public InputSource resolveEntity(String publicId, String systemId)</code>的方法，用于寻找根据<code>publicId</code>和<code>systemId</code>,寻找对应的DTD文件。</p></li><li><p>实例化<code>XPathParser</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XPathParser</span><span class="params">(InputStream inputStream, <span class="keyword">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> </span>&#123;</span><br><span class="line">  commonConstructor(validation, variables, entityResolver);</span><br><span class="line">  <span class="keyword">this</span>.document = createDocument(<span class="keyword">new</span> InputSource(inputStream));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>inputStream</code>就是我们传入的配置文件的流的信息，entityResolver是我们刚刚实例化的<code>XMLMapperEntityResolver</code>。首先调用了<code>commonConstructor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commonConstructor</span><span class="params">(<span class="keyword">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.validation = validation;</span><br><span class="line">  <span class="keyword">this</span>.entityResolver = entityResolver;</span><br><span class="line">  <span class="keyword">this</span>.variables = variables;</span><br><span class="line">   <span class="comment">// 实例化一个XPath工厂，用于生产XPath</span></span><br><span class="line">  XPathFactory factory = XPathFactory.newInstance();</span><br><span class="line">  <span class="keyword">this</span>.xpath = factory.newXPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完<code>commonConstructor</code>之后就是创建<code>Document</code>了,这一块没啥重点，解析XML成Document对象而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Document <span class="title">createDocument</span><span class="params">(InputSource inputSource)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// important: this must only be called AFTER common constructor</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个用于创建DocumentBuilder的工厂，并给工厂设置一些参数</span></span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    factory.setValidating(validation);</span><br><span class="line"></span><br><span class="line">    factory.setNamespaceAware(<span class="keyword">false</span>);</span><br><span class="line">    factory.setIgnoringComments(<span class="keyword">true</span>);</span><br><span class="line">    factory.setIgnoringElementContentWhitespace(<span class="keyword">false</span>);</span><br><span class="line">    factory.setCoalescing(<span class="keyword">false</span>);</span><br><span class="line">    factory.setExpandEntityReferences(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过工厂创建一个用于创建Document的builder</span></span><br><span class="line">    DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">    <span class="comment">// 设置一些参数</span></span><br><span class="line">    builder.setEntityResolver(entityResolver);</span><br><span class="line">    builder.setErrorHandler(<span class="keyword">new</span> ErrorHandler() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 解析输入的流创建Document</span></span><br><span class="line">    <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error creating document instance.  Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>都创建完了，我们再回到真正执行<code>XMLConfigBuilder</code>创建的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">XMLConfigBuilder</span><span class="params">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 通过父类调用Configuration的无参构造方法</span></span><br><span class="line">  <span class="keyword">super</span>(<span class="keyword">new</span> Configuration());</span><br><span class="line">  ErrorContext.instance().resource(<span class="string">"SQL Mapper Configuration"</span>);</span><br><span class="line">  <span class="keyword">this</span>.configuration.setVariables(props);</span><br><span class="line">  <span class="comment">// 确保只执行一次，调用parse()方法时，会将其设置为true</span></span><br><span class="line">  <span class="keyword">this</span>.parsed = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.environment = environment;</span><br><span class="line">  <span class="comment">// 这个是重点，后面会用到</span></span><br><span class="line">  <span class="keyword">this</span>.parser = parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>new Configuration()</code>具体干了啥，我们可以看一下源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Configuration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"JDBC"</span>, JdbcTransactionFctory.class);</span><br><span class="line">  typeAliasRegistry.registerAlias(<span class="string">"MANAGED"</span><span class="string">", ManagedTransactionFactory.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>JNDI<span class="string">", JndiDataSourceFactory.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>POOLED<span class="string">", PooledDataSourceFactory.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>UNPOOLED<span class="string">", UnpooledDataSourceFactory.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>PERPETUAL<span class="string">", PerpetualCache.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>FIFO<span class="string">", FifoCache.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>LRU<span class="string">", LruCache.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>SOFT<span class="string">", SoftCache.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>WEAK<span class="string">", WeakCache.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>DB_VENDOR<span class="string">", VendorDatabaseIdProvider.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>XML<span class="string">", XMLLanguageDriver.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>RAW<span class="string">", RawLanguageDriver.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>SLF4J<span class="string">", Slf4jImpl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>COMMONS_LOGGING<span class="string">", JakartaCommonsLoggingImpl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>LOG4J<span class="string">", Log4jImpl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>LOG4J2<span class="string">", Log4j2Impl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>JDK_LOGGING<span class="string">", Jdk14LoggingImpl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>STDOUT_LOGGING<span class="string">", StdOutImpl.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>NO_LOGGING<span class="string">", NoLoggingImpl.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>CGLIB<span class="string">", CglibProxyFactory.class);</span></span><br><span class="line"><span class="string">  typeAliasRegistry.registerAlias("</span>JAVASSIST<span class="string">", JavassistProxyFactory.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);</span></span><br><span class="line"><span class="string">  languageRegistry.register(RawLanguageDriver.class);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>我们可以看到，这个无参的构造方法主要是注册了一系列的别名，这个我们另行分析，我们先往下看。</p></li><li><p><code>XMLConfigBuilder</code>实例化完成以后就是调用其parse()方法完成一系列配置文件的解析，和对Configuration的装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Configuration <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 保证只被解析一次。</span></span><br><span class="line">  <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Each XMLConfigBuilder can only be used once."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  parsed = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// 解析根节点(至于这个evalNode是如何执行的，可以参照XPath解析xml相关的文章)</span></span><br><span class="line">  XNode xNode = parser.evalNode(<span class="string">"/configuration"</span>);</span><br><span class="line">  <span class="comment">// 解析根节点下面的子节点</span></span><br><span class="line">  parseConfiguration(xNode);</span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConfiguration</span><span class="params">(XNode root)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">//issue #117 read properties first</span></span><br><span class="line">     propertiesElement(root.evalNode(<span class="string">"properties"</span>));</span><br><span class="line">     Properties settings = settingsAsProperties(root.evalNode(<span class="string">"settings"</span>));</span><br><span class="line">     loadCustomVfs(settings);</span><br><span class="line">     typeAliasesElement(root.evalNode(<span class="string">"typeAliases"</span>));</span><br><span class="line">     pluginElement(root.evalNode(<span class="string">"plugins"</span>));</span><br><span class="line">     objectFactoryElement(root.evalNode(<span class="string">"objectFactory"</span>));</span><br><span class="line">     objectWrapperFactoryElement(root.evalNode(<span class="string">"objectWrapperFactory"</span>));</span><br><span class="line">     reflectorFactoryElement(root.evalNode(<span class="string">"reflectorFactory"</span>));</span><br><span class="line">     settingsElement(settings);</span><br><span class="line">     <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">     environmentsElement(root.evalNode(<span class="string">"environments"</span>));</span><br><span class="line">     databaseIdProviderElement(root.evalNode(<span class="string">"databaseIdProvider"</span>));</span><br><span class="line">     typeHandlerElement(root.evalNode(<span class="string">"typeHandlers"</span>));</span><br><span class="line">     mapperElement(root.evalNode(<span class="string">"mappers"</span>));</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error parsing SQL Mapper Configuration. Cause: "</span> + e, e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这是解析Configuration下面的11个子节点，并装配到Configuration中，具体解析过程可以点进去详细查看。</p><p>执行完整个parse()的过程，返回<code>Configuration</code>整个初始化流程也就结束了。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis-初始化过程&quot;&gt;&lt;a href=&quot;#Mybatis-初始化过程&quot; class=&quot;headerlink&quot; title=&quot;Mybatis 初始化过程&quot;&gt;&lt;/a&gt;Mybatis 初始化过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Mybatis的初始化就
      
    
    </summary>
    
      <category term="Mybatis" scheme="https://xiaomogu.me/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://xiaomogu.me/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Git基础命令</title>
    <link href="https://xiaomogu.me/2018/03/01/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiaomogu.me/2018/03/01/Git基础命令/</id>
    <published>2018-03-01T00:09:58.660Z</published>
    <updated>2018-03-01T08:13:45.442Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>初始化仓库    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>查看仓库日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure></li><li><p>查看仓库状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>添加文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure></li><li><p>添加所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -A .</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "&lt;commit message&gt;"</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;repository URL&gt;</span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master    // 注释:远程分支为origin，默认的本地分支为master，-u是记住提交参数，下次可以直接使用git push 进行提交</span><br></pre></td></tr></table></figure></li><li><p>拉取远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master     // 注释:同上</span><br></pre></td></tr></table></figure></li><li><p>查看最近一次提交的更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD//注释:HEAD为指针,diff的另一个重要用途是查看已经暂存文件内的更改。记住，staged文件是我们告诉git已准备好提交的文件。</span><br></pre></td></tr></table></figure></li><li><p>取消暂存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;filename&gt;//注释:从暂存区移除指定文件</span><br></pre></td></tr></table></figure></li><li><p>撤销</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;//注释:重新检出某个文件，恢复为最后一次commit的状态</span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;new_branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建并切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new_branch&gt;   //注释:13、14两条命令的合并</span><br></pre></td></tr></table></figure></li><li><p>移除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm '&lt;filename&gt;'//注释：此操作会同时从磁盘，暂存区移除指定文件</span><br></pre></td></tr></table></figure></li><li><p>合并分支到master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>移除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure></li></ol><p>相关链接：</p><p><a href="https://try.github.io/levels/1/challenges/1" target="_blank" rel="noopener">try git</a></p><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git 中文版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化仓库    &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
      <category term="Git" scheme="https://xiaomogu.me/categories/Git/"/>
    
    
      <category term="Git" scheme="https://xiaomogu.me/tags/Git/"/>
    
  </entry>
  
</feed>
